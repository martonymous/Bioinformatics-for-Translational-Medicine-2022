import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np


"""
CHI-SQUARED

Best Parameters:
 [((0.0003, 250), 12)]
 
1st Step Accuracy from the outer cross-validation:
Mean:     0.7813307757885763
StDev:    0.09205621995002539 
2nd Step Accuracy from the outer cross-validation:
Mean:     0.8609437340153453
StDev:    0.0640321287377836 
"""

chi2_1 = [0.7391304347826086, 0.8695652173913043, 0.85, 0.8, 0.8, 0.85, 0.75, 0.8, 0.8, 0.9565217391304348, 0.8823529411764706, 0.6521739130434783, 0.7333333333333333, 0.9, 0.5882352941176471, 0.8666666666666667, 0.9, 0.8235294117647058, 0.7647058823529411, 0.75, 0.8235294117647058, 0.8, 0.7, 0.6956521739130435, 0.8666666666666667, 0.7333333333333333, 0.75, 0.7, 0.8235294117647058, 0.8, 0.7647058823529411, 0.6666666666666666, 0.6, 0.7391304347826086, 0.8666666666666667, 0.7058823529411765, 0.8235294117647058, 0.6086956521739131, 0.7058823529411765, 0.9, 0.6956521739130435, 0.7647058823529411, 0.7647058823529411, 0.6, 0.8695652173913043, 0.8, 0.9565217391304348, 0.8260869565217391, 0.9333333333333333, 0.7058823529411765]
chi2_2 = [0.8695652173913043, 0.8695652173913043, 0.9, 0.8666666666666667, 0.8, 0.8, 0.95, 0.8, 0.85, 0.9130434782608695, 0.8235294117647058, 0.8695652173913043, 0.8666666666666667, 0.85, 0.7058823529411765, 1.0, 1.0, 0.8823529411764706, 0.8235294117647058, 0.85, 0.8823529411764706, 0.9333333333333333, 0.85, 0.7391304347826086, 0.9333333333333333, 0.9333333333333333, 0.8, 0.8, 0.7058823529411765, 0.8666666666666667, 0.8823529411764706, 0.9333333333333333, 0.8666666666666667, 0.8260869565217391, 0.8666666666666667, 0.8235294117647058, 0.8823529411764706, 0.8695652173913043, 0.8235294117647058, 1.0, 0.782608695652174, 0.8235294117647058, 0.8235294117647058, 0.85, 0.9130434782608695, 0.85, 0.8695652173913043, 0.8695652173913043, 0.9333333333333333, 0.8235294117647058]

print(np.median(chi2_2))


"""
MUTUAL INFO

Best Parameters:
 [((0.001, 1000), 5)]
 
1st Step Accuracy from the outer cross-validation:
Mean:     0.7870272804774083
StDev:    0.09845605112474339 

2nd Step Accuracy from the outer cross-validation:
Mean:     0.8312745098039216
StDev:    0.0704810017873717 
"""

mi_1 = [0.7391304347826086, 0.85, 0.8260869565217391, 0.7, 0.7647058823529411, 0.85, 0.75, 0.8235294117647058, 0.8, 1.0, 0.8823529411764706, 0.47058823529411764, 0.7058823529411765, 0.782608695652174, 0.7391304347826086, 0.9, 0.8235294117647058, 0.9, 0.8, 0.7058823529411765, 1.0, 0.7, 0.782608695652174, 0.7, 0.8666666666666667, 0.7647058823529411, 0.75, 0.7058823529411765, 0.9130434782608695, 0.8260869565217391, 0.7391304347826086, 0.8235294117647058, 0.7, 0.7647058823529411, 0.8823529411764706, 0.75, 0.8695652173913043, 0.6086956521739131, 0.6, 0.8235294117647058, 0.7058823529411765, 0.7391304347826086, 0.8, 0.7333333333333333, 0.8, 0.7058823529411765, 0.9411764705882353, 0.8260869565217391, 0.9333333333333333, 0.782608695652174]
mi_2 = [0.8695652173913043, 0.95, 0.9565217391304348, 0.9, 0.7647058823529411, 0.8, 0.85, 0.7647058823529411, 0.8, 0.8666666666666667, 0.7647058823529411, 0.7647058823529411, 0.7647058823529411, 0.8695652173913043, 0.7391304347826086, 0.85, 0.9411764705882353, 0.9, 0.8666666666666667, 0.7058823529411765, 0.8666666666666667, 0.9, 0.8695652173913043, 0.85, 0.8666666666666667, 0.7647058823529411, 0.85, 0.7058823529411765, 0.9565217391304348, 0.8695652173913043, 0.8260869565217391, 0.7647058823529411, 0.85, 0.8235294117647058, 0.8235294117647058, 0.8, 0.8695652173913043, 0.6521739130434783, 0.75, 0.9411764705882353, 0.7647058823529411, 0.8695652173913043, 0.8666666666666667, 0.8, 0.8666666666666667, 0.7058823529411765, 0.8823529411764706, 0.782608695652174, 0.8666666666666667, 0.8695652173913043]

print(np.median(mi_2))

"""
SHAP

Best Paramaters:
 [((0.0003, 500), 9)]

These are the Accuracies from the outer cross-validation
1st Step Accuracy from the outer cross-validation:
Mean:     0.7974407502131288
StDev:    0.09149840797663926 

2nd Step Accuracy from the outer cross-validation:
Mean:     0.8321227621483376
StDev:    0.07626980383387676 
"""

shap_1 = [0.8666666666666667, 0.8666666666666667, 0.85, 0.8235294117647058, 0.7647058823529411, 0.8823529411764706, 0.8, 0.8, 0.6956521739130435, 1.0, 0.8666666666666667, 0.6666666666666666, 0.7058823529411765, 0.8823529411764706, 0.6, 0.8823529411764706, 0.9130434782608695, 0.8235294117647058, 0.782608695652174, 0.75, 1.0, 0.7647058823529411, 0.782608695652174, 0.7, 0.85, 0.7647058823529411, 0.7647058823529411, 0.7, 0.8666666666666667, 0.8, 0.7391304347826086, 0.6666666666666666, 0.7, 0.65, 0.85, 0.8666666666666667, 0.8695652173913043, 0.8, 0.6521739130434783, 0.8666666666666667, 0.7, 0.8, 0.7647058823529411, 0.7333333333333333, 0.8, 0.7058823529411765, 0.95, 0.8666666666666667, 0.9411764705882353, 0.7333333333333333]
shap_2 = [0.9333333333333333, 0.9333333333333333, 0.9, 0.7058823529411765, 0.8235294117647058, 0.8235294117647058, 0.9333333333333333, 0.8666666666666667, 0.782608695652174, 0.8666666666666667, 0.7333333333333333, 0.7333333333333333, 0.7647058823529411, 1.0, 0.6666666666666666, 0.7647058823529411, 0.782608695652174, 0.8235294117647058, 0.8695652173913043, 0.8, 0.8666666666666667, 0.8823529411764706, 0.8695652173913043, 0.75, 0.9, 0.9411764705882353, 0.8823529411764706, 0.75, 1.0, 0.7333333333333333, 0.8260869565217391, 0.8, 0.75, 0.85, 0.85, 0.8, 0.8695652173913043, 0.8, 0.782608695652174, 0.9333333333333333, 0.75, 0.8, 0.8235294117647058, 0.7333333333333333, 0.8666666666666667, 0.7647058823529411, 0.9, 0.8666666666666667, 0.8235294117647058, 0.9333333333333333]
print(np.median(shap_2))
zeroes = ['1st step'] * 50
oness  = ['2nd step'] * 50
cat = zeroes + oness + zeroes + oness + zeroes + oness

shap = ['SHAP'] * 100
mi = ['Mutual Information'] * 100
chi2 = ['Chi-squared'] * 100
met = shap + mi + chi2

vals = shap_1 + shap_2 + mi_1 + mi_2 + chi2_1 + chi2_2
df = pd.DataFrame(list(zip(vals, met, cat)), columns=['Accuracies', 'Feature Selection Method', 'Model'])

ax = sns.boxplot(y='Accuracies', x='Feature Selection Method', data=df, palette='Set3', hue='Model', showfliers=False)
sns.stripplot(y='Accuracies', x='Feature Selection Method',
              data=df,
              dodge=True,
              jitter=True,
              alpha=0.5,
              hue='Model').set(title='Comparison of 1st and 2nd Step Accuracies for\nDifferent Feature Selection Methods')

handles, labels = ax.get_legend_handles_labels()
l = plt.legend(handles[0:2], labels[0:2], bbox_to_anchor=(.98, 0.15), loc=1, borderaxespad=0.)


plt.show()


